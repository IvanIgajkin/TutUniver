#https://colab.research.google.com/drive/123q91kggpO5RY7CY4o8ymsm4g173eScR
#выше ссылка на сам блокнот (перед использованием ссылки убрать "#" из неё)

import numpy as np
import numdifftools as nd
from scipy.optimize import fmin

#задаём функцию
f = lambda x_vec: 2 * x_vec[0]**2 + x_vec[0] * x_vec[1] + x_vec[1]**2
#f = lambda x_vec: 4 * (x_vec[0] - 4)**2 + (x_vec[1] - 3)**2

ZERO = 1e-4 #"условный ноль" для использования при сравнении вещественных чисел  с нулем

#проверка на положительную определенность H(xk)
def is_positive_def_mtrx(matrix):
    return np.all(np.linalg.eigvals(matrix) > 0)

#метод для нахождения tk
def find_tk(xk, dk):
    fi = lambda t: f(xk + t * dk)
    t0 = 0.0

    return fmin(fi, t0, disp=False)[0]

x0 = (0.5, 1) #начальное приближение
eps1, eps2 = 0.1, 0.15 #задаваемая точность
M = 10 #предельное число итераций

k = 0
xk = x0 #задаём xk, как начальное приближение

# в python нет цикла вида do ... while, поэтому используем обычный while
# и, так как новая точка не известна до начала работы цикла, проверку на сходимость нельзя поставить, как главное условие выхода из цикла
while k < M:
    print('Iteration: {0}\tCurrent x = (x1={1}, x2={2})'.format(k + 1, xk[0], xk[1]))

    grad_value = nd.Gradient(f)(xk) #значение градиента для xk
    if np.linalg.norm(grad_value) <= eps1: #проверка на норму градиента функции для xk
        break

    if k == 0:
        dk = -grad_value
        old_grad_value = grad_value
        k = k + 1
        continue
  
    beta_k = (np.linalg.norm(grad_value)/np.linalg.norm(old_grad_value))**2
    dk = -grad_value + beta_k * dk
  
    tk = find_tk(xk, dk)
    xk_new = xk + tk * dk
    if np.linalg.norm(xk_new - xk) < eps2 and np.linalg.norm(f(xk_new) - f(xk)) < eps2: #проверка на сходимость
        break
    
    xk = xk_new
    old_grad_value = grad_value
    k = k + 1
  #цикл начинается сначала

# заменить все значения, примерно равные нулю на 0.0
xk = list(map(lambda xi: 0.0 if xi < ZERO else xi, xk))

print()
print('Found local minimum on iterarion {0}'.format(k + 1))
print('Local minimum for the function is (x1={0}, x2={1})'.format(xk[0], xk[1]))
